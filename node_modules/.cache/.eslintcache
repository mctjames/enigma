[{"/home/james/sfu/hist338/enigma/enigma/src/index.js":"1","/home/james/sfu/hist338/enigma/enigma/src/reportWebVitals.js":"2","/home/james/sfu/hist338/enigma/enigma/src/App.js":"3","/home/james/sfu/hist338/enigma/enigma/src/components/Header.js":"4","/home/james/sfu/hist338/enigma/enigma/src/components/Encode.js":"5","/home/james/sfu/hist338/fp/enigma/src/index.js":"6","/home/james/sfu/hist338/fp/enigma/src/App.js":"7","/home/james/sfu/hist338/fp/enigma/src/components/Header.js":"8","/home/james/sfu/hist338/fp/enigma/src/components/Encode.js":"9"},{"size":222,"mtime":1633894628800,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1633809676178,"results":"12","hashOfConfig":"11"},{"size":1846,"mtime":1636154150056,"results":"13","hashOfConfig":"11"},{"size":205,"mtime":1635906466698,"results":"14","hashOfConfig":"11"},{"size":33681,"mtime":1636764382933,"results":"15","hashOfConfig":"11"},{"size":222,"mtime":1633894628800,"results":"16","hashOfConfig":"17"},{"size":246,"mtime":1637439552580,"results":"18","hashOfConfig":"17"},{"size":258,"mtime":1637437386452,"results":"19","hashOfConfig":"17"},{"size":26232,"mtime":1637439492564,"results":"20","hashOfConfig":"17"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q50qzw",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"8sqa8m",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/james/sfu/hist338/enigma/enigma/src/index.js",[],"/home/james/sfu/hist338/enigma/enigma/src/reportWebVitals.js",[],["42","43"],"/home/james/sfu/hist338/enigma/enigma/src/App.js",[],"/home/james/sfu/hist338/enigma/enigma/src/components/Header.js",[],"/home/james/sfu/hist338/enigma/enigma/src/components/Encode.js",["44","45","46","47","48","49","50","51","52","53","54"],"import React, { useState, useEffect } from 'react'\n\nfunction Encode() {\n    \n    const [inputMessage, setMessage] = useState(\"\");\n    \n    const [rotorOne, setRotorOne] = useState('I');\n    const [rotorTwo, setRotorTwo] = useState('II');\n    const [rotorThree, setRotorThree] = useState('III');\n\n    const [initPosOne, setInitPosingOne] = useState('A')\n    const [initPosTwo, setInitPosingTwo] = useState('A')\n    const [initPosThree, setInitPosingThree] = useState('A')\n    const [ringOne, setRingOne] = useState('A')\n    const [ringTwo, setRingTwo] = useState('A')\n    const [ringThree, setRingThree] = useState('A')\n    const [reflector, setReflector] = useState('UKWB');\n\n\n\n    useEffect(() => {\n        isValidInput(inputMessage);\n    }, [inputMessage, rotorOne, rotorTwo, rotorThree, initPosOne, initPosTwo, initPosThree, ringOne, ringTwo, ringThree, reflector])  //eslint-disable-line react-hooks/exhaustive-deps\n\n    function isValidInput(inputMessage) {\n        inputMessage = inputMessage.replace(/\\s/g, '');\n        if (/^[a-zA-Z]*$/g.test(inputMessage)){\n            //console.log(\"its a valid input\");\n        }\n        else{\n            //console.log(\"error bad input\")\n            alert(\"Please use only the letters A-Z either upper or lower case.\")\n        }\n    }\n\n    // Historical Note: used Rotors from Enigma 1 Introduced in 1930. Rotors IV and V were introduced for the M3 Army Enigma in 1938 (https://en.wikipedia.org/wiki/Enigma_rotor_details)\n    var defaultAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('');\n    var ringAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('');\n    var alphabetRight = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('');\n    var alphabetMiddle = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('');\n    var alphabetLeft = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('');\n\n    var I     = \"EKMFLGDQVZNTOWYHXUSPAIBRCJ\".split('');\n    var II    = \"AJDKSIRUXBLHWTMCQGZNPYFVOE\".split('');\n    var III   = \"BDFHJLCPRTXVZNYEIWGAKMUSQO\".split('');\n    var IV    = \"ESOVPZJAYQUIRHXLNFTGKDCMWB\".split('');\n    var V     = \"VZBRGITYUPSDNHLXAWMJQOFECK\".split('');\n    var UKWB = \"YRUHQSLDPXNGOKMIEBFZCWVJAT\".split('');\n    var UKWC = \"FVPJIAOYEDRZXWGCTKUQSBNMHL\".split('');\n\n    var rotorInputOne = eval(rotorOne)\n    var rotorInputTwo = eval(rotorTwo)\n    var rotorInputThree = eval(rotorThree)\n    var reflectorInput = eval(reflector)\n\n    // Turns the rotors but ignores the notches that force other rotors to change (I turns on Q, II on E...)\n    function turnRotor(rotor, alphabet){\n        //shift the corresponding default alphabet one value to the right\n        var temp1 = alphabet[0];\n        alphabet.shift();\n        alphabet.push(temp1);\n        //Shift the encoded rotor values one to the right\n        var temp2 = rotor[0];\n        rotor.shift();\n        rotor.push(temp2);\n    }\n\n    // Rotor function that deals with the first rotor and its notch for adjusting the second rotor\n    function turnRotorOne(rotor, alphabet, turnLetter) {\n        //shift the corresponding default alphabet one value to the right\n        var temp1 = alphabet[0];\n        alphabet.shift();\n        alphabet.push(temp1);\n        //Shift the encoded rotor values one to the right\n        var temp2 = rotor[0];\n        rotor.shift();\n        rotor.push(temp2);\n        // the notched letter was turned from position 0 to 25. When we find the notched letter at pos 25 we need to turn the middle rotor\n        \n        if(alphabet[25] === turnLetter){\n            if(rotorTwo === \"I\"){\n                turnRotorTwo(rotorInputTwo, alphabetMiddle, \"Q\");\n            }else if (rotorTwo === \"II\"){\n                turnRotorTwo(rotorInputTwo, alphabetMiddle, \"E\");\n            }\n            else if (rotorTwo === \"III\"){\n                turnRotorTwo(rotorInputTwo, alphabetMiddle, \"V\");\n            }else if (rotorTwo === \"IV\"){\n                turnRotorTwo(rotorInputTwo, alphabetMiddle, \"J\");\n            }else if (rotorTwo === \"V\"){\n                turnRotorTwo(rotorInputTwo, alphabetMiddle, \"Z\");\n            }\n        }\n    }\n\n    // rotor function that deals with the notch for rotor two\n    function turnRotorTwo(rotor, alphabet, turnLetter){\n        //shift the corresponding default alphabet one value to the right\n        var temp1 = alphabet[0];\n        alphabet.shift();\n        alphabet.push(temp1);\n        //Shift the encoded rotor values one to the right\n        var temp2 = rotor[0];\n        rotor.shift();\n        rotor.push(temp2);\n\n        // the notched letter was turned from position 0 to 25. When we find the notched letter at pos 25 we need to turn the final rotor\n        if(alphabet[25] === turnLetter){\n            turnRotor(rotorInputThree, alphabetLeft);\n        }\n    }\n\n    // Turns the initial rotor Positions to the letters the user inputs\n    function setInitialPosition(){\n        while(initPosOne !== alphabetRight[0]){\n            turnRotor(rotorInputOne, alphabetRight)\n        }\n        while(initPosTwo !== alphabetMiddle[0]){\n            turnRotor(rotorInputTwo, alphabetMiddle)\n        }\n        while(initPosThree !== alphabetLeft[0]){\n            turnRotor(rotorInputThree, alphabetLeft)\n        }\n    }\n\n    function setRing(rotor, ringSetting){\n        var newRotor = []\n        for(let j = 0; j < rotor.length; j++){\n            var letter = rotor[j]\n            var index = defaultAlphabet.indexOf(rotor[j])\n            if(index + ringSetting < 26){\n                index = index + ringSetting\n            }else{\n                index = index + ringSetting - 26\n            }\n            letter = ringAlphabet[index]\n            newRotor.push(letter)\n        }\n        rotor = newRotor\n        for(let i = 0; i < ringSetting; i++){\n            var temp = rotor[25];\n            rotor.pop();\n            rotor.unshift(temp);\n        }\n        //console.log(\"Turned rotor: \", rotor)\n        return(rotor)\n    }\n\n    function encrypt(){\n        var input = inputMessage.toUpperCase();\n        var result = [];\n        var letter = \"\";\n\n        // Initial Position: Turn the Rotors to the desired start positions (If you set rotor One to \"R\" then R will be at position 0)\n        setInitialPosition();\n        \n        // Ring Settings: Shift the connections of a rotor. If A -> K after the ring setting changes one position then K gets increased one\n        // spot in the alphabet to L. Then the positions get rotated. See https://crypto.stackexchange.com/questions/29315/how-does-the-ring-settings-of-enigma-change-wiring-tables\n        rotorInputOne = setRing(rotorInputOne, defaultAlphabet.indexOf(ringOne));\n        rotorInputTwo = setRing(rotorInputTwo, defaultAlphabet.indexOf(ringTwo));\n        rotorInputThree = setRing(rotorInputThree, defaultAlphabet.indexOf(ringThree));\n      \n\n\n\n        //loop through userInput (inputMessage)  \n        for(let i = 0; i < input.length; i++){\n            // turni the rotor after each key press of the user. \n            if(rotorOne === \"I\"){\n                turnRotorOne(rotorInputOne, alphabetRight, \"Q\");\n            }else if (rotorOne === \"II\"){\n                turnRotorOne(rotorInputOne, alphabetRight, \"E\");\n            }\n            else if (rotorOne === \"III\"){\n                turnRotorOne(rotorInputOne, alphabetRight, \"V\");\n            }else if (rotorOne === \"IV\"){\n                turnRotorOne(rotorInputOne, alphabetRight, \"J\");\n            }else if (rotorOne === \"V\"){\n                turnRotorOne(rotorInputOne, alphabetRight, \"Z\");\n            }\n\n            // The letter of the user input is passed through to the first rotor. Position of letter --> Find the corresponding letter in rotor I \n            // as the position of the letter in the original alphabet. Example: User Input \"B\" --> B is position 1 in the regular alhpabet. --> Letter at \n            // position 1 on Rotor I is \"k\". Therefore K is the current letter. This process repeats for each rotor \n            \n            //step 1 get index of user input on a regular alphabet\n            //console.log(\"Original input was: \", input[i])\n            var letterIndex = defaultAlphabet.indexOf(input[i]);\n            //console.log(\"letterIndex of input letter on a regular alphabet: \", letterIndex)\n\n            //Right/fast rotor\n            letter = alphabetRight[letterIndex]\n            //console.log(\"letter @ right side of the first rotor: \", alphabetRight[letterIndex])\n            letterIndex = alphabetRight.indexOf(letter)\n            //console.log(\"letterIndex @ right side of first rotor: \", letterIndex)\n            letter = rotorInputOne[letterIndex]\n            //console.log(\"letter @ left side of first rotor: \", letter)\n            letterIndex = alphabetRight.indexOf(letter)\n            //console.log(\"letterIndex @ left side of first rotor: \", letterIndex)\n            \n            //Middle/medium rotor\n            letter = alphabetMiddle[letterIndex]\n            //console.log(\"letter @ right side of second rotor: \", letter)\n            letterIndex = alphabetMiddle.indexOf(letter)\n            //console.log(\"letterIndex @ right side of second rotor: \", letterIndex)\n            letter = rotorInputTwo[letterIndex]\n            //console.log(\"letter @ left side of second rotor: \", letter)\n            letterIndex = alphabetMiddle.indexOf(letter)\n            //console.log(\"letterIndex @ left side of second rotor: \", letterIndex)\n\n            //Left/slow rotor\n            letter = alphabetLeft[letterIndex]\n            //console.log(\"letter @ right side of third rotor: \", letter)\n            letterIndex = alphabetLeft.indexOf(letter)\n            //console.log(\"letterIndex @ right side of third rotor: \", letterIndex)\n            letter = rotorInputThree[letterIndex]\n            //console.log(\"letter @ left side of third rotor: \", letter)\n            letterIndex = alphabetLeft.indexOf(letter)\n            //console.log(\"letterIndex @ left side of third rotor: \", letterIndex)\n\n            // //The reflector. Here the letter that came from the left rotor is matched to a new cypther. UKW-B or UKW-C. This is standard cypher one for one. \n            // // The new letter is passed back into the rotor. \n            // // Note that this process now happens in reverse order. Rotor First then Alphabet. \n            letter = defaultAlphabet[letterIndex]\n            //console.log(\"letter @ right side of reflector: \", letter)\n            letterIndex = defaultAlphabet.indexOf(letter)\n            //console.log(\"letterIndex @ right side of reflector: \", letterIndex)\n            letter = reflectorInput[letterIndex]\n            //console.log(\"letter @ left side of reflector: \", letter)\n            letterIndex = defaultAlphabet.indexOf(letter)\n            //console.log(\"letterIndex @ right side of the reflector: \", letterIndex)\n\n            // We repeat the process of moving through the three rotors but this time from left to right. \n            //Left/slow rotor\n            letter = alphabetLeft[letterIndex]\n            //console.log(\"letter @ left side of third rotor: \", letter)\n            letterIndex = rotorInputThree.indexOf(letter)\n            //console.log(\"letterIndex @ left side of third rotor: \", letterIndex)\n            letter = alphabetLeft[letterIndex]\n            //console.log(\"letter @ right side of third rotor: \", letter)\n            letterIndex = alphabetLeft.indexOf(letter)\n            //console.log(\"letterIndex @ right side of third rotor: \", letterIndex)\n            \n            //middle/medium rotor\n            letter = alphabetMiddle[letterIndex]\n            //console.log(\"letter @ left side of mid rotor: \", letter)\n            letterIndex = rotorInputTwo.indexOf(letter)\n            //console.log(\"letterIndex @ left side of mid rotor: \", letterIndex)\n            letter = alphabetMiddle[letterIndex]\n            //console.log(\"letter @ right side of mid rotor: \", letter)\n            letterIndex = alphabetMiddle.indexOf(letter)                           \n            //console.log(\"letterIndex @ right side of mid rotor: \", letterIndex)\n            \n            //right/fast rotor\n            letter = alphabetRight[letterIndex]\n            //console.log(\"letter @ left side of right rotor: \", letter)\n            letterIndex = rotorInputOne.indexOf(letter)\n            //console.log(\"letterIndex @ left side of right rotor: \", letterIndex)\n            letter = alphabetRight[letterIndex]\n            //console.log(\"letter @ right side of right rotor: \", letter)\n            letterIndex = alphabetRight.indexOf(letter)\n            //console.log(\"letterIndex @ right side of right rotor: \", letterIndex)\n\n            // output\n            letter = defaultAlphabet[letterIndex]\n            result.push(letter)\n        }\n        //console.log(\"result: \", result)\n        return(result)\n    }\n\n    var output = encrypt();\n    output = output.join(\"\");\n    //console.log(\"output: \", output)\n   \n\n    return (\n        <div>\n            <div className=\"input-section\">\n                <label>Code Input</label>   \n                <input \n                    className=\"input-text\" \n                    id=\"enigma-input\" \n                    type=\"text\" \n                    placeholder=\"Input\"\n                    onChange={(event) => setMessage(event.target.value)}\n                />\n            </div>\n            <div className=\"output-section\">\n                <label>Code Output</label> \n                <p style={{color: \"red\"}}>{output}</p>\n            </div>\n\n            <h2>Rotors settings</h2>\n            <div className=\"settings-subsection\">\n                <label><a href=\"https://en.wikipedia.org/wiki/Enigma_machine#Rotors\">Rotor types (Walzenlage)</a></label>\n                    <select \n                        className=\"rotor-type-settings\" \n                        id=\"rotor-type-left\"\n                        defaultValue={rotorOne}\n                        onChange={(event) => setRotorOne(event.target.value)}\n                    >\n                            <option value=\"alphabetRight\">alphabetRight</option>\n                            <option value=\"Alt\">Alt</option>\n                            <option value=\"Alt2\">Alt2</option>\n                            <option value=\"I\">I</option>\n                            <option value=\"II\">II</option>\n                            <option value=\"III\">III</option>\n                            <option value=\"IV\">IV</option>\n                            <option value=\"V\">V</option>\n                    </select>\n\n                    <select \n                        className=\"rotor-type-settings\" \n                        id=\"rotor-type-middle\"\n                        defaultValue={rotorTwo}\n                        onChange={(event) => setRotorTwo(event.target.value)}\n                    >\n                            <option value=\"defaultAlfa\">defaultAlfa</option>\n                            <option value=\"Alt\">Alt</option>\n                            <option value=\"Alt2\">Alt2</option>\n                            <option value=\"I\">I</option>\n                            <option value=\"II\">II</option>\n                            <option value=\"III\">III</option>\n                            <option value=\"IV\">IV</option>\n                            <option value=\"V\">V</option>\n                    </select>\n\n                    <select \n                        className=\"rotor-type-settings\" \n                        id=\"rotor-type-right\"\n                        defaultValue={rotorThree}\n                        onChange={(event) => setRotorThree(event.target.value)}\n                    >\n                            <option value=\"defaultAlfa\">defaultAlfa</option>\n                            <option value=\"Alt\">Alt</option>\n                            <option value=\"Alt2\">Alt2</option>\n                            <option value=\"I\">I</option>\n                            <option value=\"II\">II</option>\n                            <option value=\"III\">III</option>\n                            <option value=\"IV\">IV</option>\n                            <option value=\"V\">V</option>\n                    </select>\n            </div>\n            <div className=\"settings-subsection\">\n                <label><a href=\"https://en.wikipedia.org/wiki/Enigma_rotor_details#Rotor_offset\">Initial Position (Grundstellung)</a></label>\n\n                <select \n                    className=\"rotor-settings\" \n                    id=\"rotor-left-pos\"\n                    defaultValue={initPosOne}\n                    onChange={(event) => setInitPosingOne(event.target.value)}\n                >\n                        <option value=\"A\">A</option>\n                        <option value=\"B\">B</option>\n                        <option value=\"C\">C</option>\n                        <option value=\"D\">D</option>\n                        <option value=\"E\">E</option>\n                        <option value=\"F\">F</option>\n                        <option value=\"G\">G</option>\n                        <option value=\"H\">H</option>\n                        <option value=\"I\">I</option>\n                        <option value=\"J\">J</option>\n                        <option value=\"K\">K</option>\n                        <option value=\"L\">L</option>\n                        <option value=\"M\">M</option>\n                        <option value=\"N\">N</option>\n                        <option value=\"O\">O</option>\n                        <option value=\"P\">P</option>\n                        <option value=\"Q\">Q</option>\n                        <option value=\"R\">R</option>\n                        <option value=\"S\">S</option>\n                        <option value=\"T\">T</option>\n                        <option value=\"U\">U</option>\n                        <option value=\"V\">V</option>\n                        <option value=\"W\">W</option>\n                        <option value=\"X\">X</option>\n                        <option value=\"Y\">Y</option>\n                        <option value=\"Z\">Z</option>\n                </select>\n\n                <select \n                    className=\"rotor-settings\" \n                    id=\"rotor-middle-pos\"\n                    defaultValue={initPosTwo}\n                    onChange={(event) => setInitPosingTwo(event.target.value)}\n                >\n                        <option value=\"A\">A</option>\n                        <option value=\"B\">B</option>\n                        <option value=\"C\">C</option>\n                        <option value=\"D\">D</option>\n                        <option value=\"E\">E</option>\n                        <option value=\"F\">F</option>\n                        <option value=\"G\">G</option>\n                        <option value=\"H\">H</option>\n                        <option value=\"I\">I</option>\n                        <option value=\"J\">J</option>\n                        <option value=\"K\">K</option>\n                        <option value=\"L\">L</option>\n                        <option value=\"M\">M</option>\n                        <option value=\"N\">N</option>\n                        <option value=\"O\">O</option>\n                        <option value=\"P\">P</option>\n                        <option value=\"Q\">Q</option>\n                        <option value=\"R\">R</option>\n                        <option value=\"S\">S</option>\n                        <option value=\"T\">T</option>\n                        <option value=\"U\">U</option>\n                        <option value=\"V\">V</option>\n                        <option value=\"W\">W</option>\n                        <option value=\"X\">X</option>\n                        <option value=\"Y\">Y</option>\n                        <option value=\"Z\">Z</option>\n                </select>\n\n                <select \n                    className=\"rotor-settings\" \n                    id=\"rotor-right-pos\"\n                    defaultValue={initPosThree}\n                    onChange={(event) => setInitPosingThree(event.target.value)}\n                >\n                        <option value=\"A\">A</option>\n                        <option value=\"B\">B</option>\n                        <option value=\"C\">C</option>\n                        <option value=\"D\">D</option>\n                        <option value=\"E\">E</option>\n                        <option value=\"F\">F</option>\n                        <option value=\"G\">G</option>\n                        <option value=\"H\">H</option>\n                        <option value=\"I\">I</option>\n                        <option value=\"J\">J</option>\n                        <option value=\"K\">K</option>\n                        <option value=\"L\">L</option>\n                        <option value=\"M\">M</option>\n                        <option value=\"N\">N</option>\n                        <option value=\"O\">O</option>\n                        <option value=\"P\">P</option>\n                        <option value=\"Q\">Q</option>\n                        <option value=\"R\">R</option>\n                        <option value=\"S\">S</option>\n                        <option value=\"T\">T</option>\n                        <option value=\"U\">U</option>\n                        <option value=\"V\">V</option>\n                        <option value=\"W\">W</option>\n                        <option value=\"X\">X</option>\n                        <option value=\"Y\">Y</option>\n                        <option value=\"Z\">Z</option>\n                </select>\n\n            </div>\n            <div className=\"settings-subsection\">\n                <label><a href=\"https://en.wikipedia.org/wiki/Enigma_rotor_details#Ring_setting\">Ring settings (Ringstellung)</a></label>\n                \n                <select \n                    className=\"ring-settings\" \n                    id=\"ring-left-pos\"\n                    defaultValue={ringOne}\n                    onChange={(event) => setRingOne(event.target.value)}\n                >\n                        <option value=\"A\">A</option>\n                        <option value=\"B\">B</option>\n                        <option value=\"C\">C</option>\n                        <option value=\"D\">D</option>\n                        <option value=\"E\">E</option>\n                        <option value=\"F\">F</option>\n                        <option value=\"G\">G</option>\n                        <option value=\"H\">H</option>\n                        <option value=\"I\">I</option>\n                        <option value=\"J\">J</option>\n                        <option value=\"K\">K</option>\n                        <option value=\"L\">L</option>\n                        <option value=\"M\">M</option>\n                        <option value=\"N\">N</option>\n                        <option value=\"O\">O</option>\n                        <option value=\"P\">P</option>\n                        <option value=\"Q\">Q</option>\n                        <option value=\"R\">R</option>\n                        <option value=\"S\">S</option>\n                        <option value=\"T\">T</option>\n                        <option value=\"U\">U</option>\n                        <option value=\"V\">V</option>\n                        <option value=\"W\">W</option>\n                        <option value=\"X\">X</option>\n                        <option value=\"Y\">Y</option>\n                        <option value=\"Z\">Z</option>\n                </select>\n                <select \n                    className=\"ring-settings\" \n                    id=\"ring-middle-pos\"\n                    defaultValue={ringTwo}\n                    onChange={(event) => setRingTwo(event.target.value)}\n                >\n                        <option value=\"A\">A</option>\n                        <option value=\"B\">B</option>\n                        <option value=\"C\">C</option>\n                        <option value=\"D\">D</option>\n                        <option value=\"E\">E</option>\n                        <option value=\"F\">F</option>\n                        <option value=\"G\">G</option>\n                        <option value=\"H\">H</option>\n                        <option value=\"I\">I</option>\n                        <option value=\"J\">J</option>\n                        <option value=\"K\">K</option>\n                        <option value=\"L\">L</option>\n                        <option value=\"M\">M</option>\n                        <option value=\"N\">N</option>\n                        <option value=\"O\">O</option>\n                        <option value=\"P\">P</option>\n                        <option value=\"Q\">Q</option>\n                        <option value=\"R\">R</option>\n                        <option value=\"S\">S</option>\n                        <option value=\"T\">T</option>\n                        <option value=\"U\">U</option>\n                        <option value=\"V\">V</option>\n                        <option value=\"W\">W</option>\n                        <option value=\"X\">X</option>\n                        <option value=\"Y\">Y</option>\n                        <option value=\"Z\">Z</option>\n                </select>\n            \n                <select \n                    className=\"ring-settings\" \n                    id=\"ring-right-pos\"\n                    defaultValue={ringThree}\n                    onChange={(event) => setRingThree(event.target.value)}\n                >\n                        <option value=\"A\">A</option>\n                        <option value=\"B\">B</option>\n                        <option value=\"C\">C</option>\n                        <option value=\"D\">D</option>\n                        <option value=\"E\">E</option>\n                        <option value=\"F\">F</option>\n                        <option value=\"G\">G</option>\n                        <option value=\"H\">H</option>\n                        <option value=\"I\">I</option>\n                        <option value=\"J\">J</option>\n                        <option value=\"K\">K</option>\n                        <option value=\"L\">L</option>\n                        <option value=\"M\">M</option>\n                        <option value=\"N\">N</option>\n                        <option value=\"O\">O</option>\n                        <option value=\"P\">P</option>\n                        <option value=\"Q\">Q</option>\n                        <option value=\"R\">R</option>\n                        <option value=\"S\">S</option>\n                        <option value=\"T\">T</option>\n                        <option value=\"U\">U</option>\n                        <option value=\"V\">V</option>\n                        <option value=\"W\">W</option>\n                        <option value=\"X\">X</option>\n                        <option value=\"Y\">Y</option>\n                        <option value=\"Z\">Z</option>\n                </select>            \n            \n            </div>\n            <h2>Reflector settings</h2>\n            <div className=\"settings-subsection\">\n                <label><a href=\"https://en.wikipedia.org/wiki/Enigma_machine#Reflector\">Reflector type (Umkehrwalze)</a></label>\n                <select \n                    defaultValue={\"UKWB\"} \n                    className=\"reflector-settings\" \n                    id=\"reflector-type\"\n                    onChange={(event) => setReflector(event.target.value)}\n                >\n                    <option value=\"UKWB\">UkWB</option>\n                    <option value=\"UKWC\">UKWC</option>\n                </select>\n            </div>\n            <h2>Plugboard settings</h2>\n            <div className=\"settings-subsection\">\n                <label><a href=\"https://en.wikipedia.org/wiki/Enigma_machine#Plugboard\">Plugboard connections (Steckerbrett)</a></label>\n                <table className=\"plugboard-settings\">\n                    <tbody>\n                        <tr>\n                            <td>\n                                <label>A</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-A\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>B</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-B\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>C</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-C\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>D</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-D\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>E</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-E\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>F</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-F\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>G</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-G\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>H</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-H\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>I</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-I\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>J</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-J\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>K</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-K\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>L</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-L\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>M</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-M\" type=\"text\"/>\n                            </td>\n                            \n                        </tr>\n                        <tr>\n                            <td>\n                                <label>N</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-N\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>O</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-O\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>P</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-P\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>Q</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-Q\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>R</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-R\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>S</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-S\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>T</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-T\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>U</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-U\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>V</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-V\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>W</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-W\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>X</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-X\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>Y</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-Y\" type=\"text\"/>\n                            </td>\n                            <td>\n                                <label>Z</label>\n                                <input className=\"plugboard-letter-settings\" id=\"plugboard-letter-Z\" type=\"text\"/>\n                            </td>\n                        </tr>\n                    </tbody>    \n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default Encode\n","/home/james/sfu/hist338/fp/enigma/src/index.js",[],["55","56"],"/home/james/sfu/hist338/fp/enigma/src/App.js",[],"/home/james/sfu/hist338/fp/enigma/src/components/Header.js",[],"/home/james/sfu/hist338/fp/enigma/src/components/Encode.js",["57","58","59","60","61","62","63","64","65","66","67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":43,"column":9,"nodeType":"74","messageId":"75","endLine":43,"endColumn":10},{"ruleId":"72","severity":1,"message":"76","line":44,"column":9,"nodeType":"74","messageId":"75","endLine":44,"endColumn":11},{"ruleId":"72","severity":1,"message":"77","line":45,"column":9,"nodeType":"74","messageId":"75","endLine":45,"endColumn":12},{"ruleId":"72","severity":1,"message":"78","line":46,"column":9,"nodeType":"74","messageId":"75","endLine":46,"endColumn":11},{"ruleId":"72","severity":1,"message":"79","line":47,"column":9,"nodeType":"74","messageId":"75","endLine":47,"endColumn":10},{"ruleId":"72","severity":1,"message":"80","line":48,"column":9,"nodeType":"74","messageId":"75","endLine":48,"endColumn":13},{"ruleId":"72","severity":1,"message":"81","line":49,"column":9,"nodeType":"74","messageId":"75","endLine":49,"endColumn":13},{"ruleId":"82","severity":1,"message":"83","line":51,"column":25,"nodeType":"84","messageId":"85","endLine":51,"endColumn":29},{"ruleId":"82","severity":1,"message":"83","line":52,"column":25,"nodeType":"84","messageId":"85","endLine":52,"endColumn":29},{"ruleId":"82","severity":1,"message":"83","line":53,"column":27,"nodeType":"84","messageId":"85","endLine":53,"endColumn":31},{"ruleId":"82","severity":1,"message":"83","line":54,"column":26,"nodeType":"84","messageId":"85","endLine":54,"endColumn":30},{"ruleId":"68","replacedBy":"86"},{"ruleId":"70","replacedBy":"87"},{"ruleId":"72","severity":1,"message":"73","line":40,"column":9,"nodeType":"74","messageId":"75","endLine":40,"endColumn":10},{"ruleId":"72","severity":1,"message":"76","line":41,"column":9,"nodeType":"74","messageId":"75","endLine":41,"endColumn":11},{"ruleId":"72","severity":1,"message":"77","line":42,"column":9,"nodeType":"74","messageId":"75","endLine":42,"endColumn":12},{"ruleId":"72","severity":1,"message":"78","line":43,"column":9,"nodeType":"74","messageId":"75","endLine":43,"endColumn":11},{"ruleId":"72","severity":1,"message":"79","line":44,"column":9,"nodeType":"74","messageId":"75","endLine":44,"endColumn":10},{"ruleId":"72","severity":1,"message":"80","line":45,"column":9,"nodeType":"74","messageId":"75","endLine":45,"endColumn":13},{"ruleId":"72","severity":1,"message":"81","line":46,"column":9,"nodeType":"74","messageId":"75","endLine":46,"endColumn":13},{"ruleId":"82","severity":1,"message":"83","line":48,"column":25,"nodeType":"84","messageId":"85","endLine":48,"endColumn":29},{"ruleId":"82","severity":1,"message":"83","line":49,"column":25,"nodeType":"84","messageId":"85","endLine":49,"endColumn":29},{"ruleId":"82","severity":1,"message":"83","line":50,"column":27,"nodeType":"84","messageId":"85","endLine":50,"endColumn":31},{"ruleId":"82","severity":1,"message":"83","line":51,"column":26,"nodeType":"84","messageId":"85","endLine":51,"endColumn":30},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'I' is assigned a value but never used.","Identifier","unusedVar","'II' is assigned a value but never used.","'III' is assigned a value but never used.","'IV' is assigned a value but never used.","'V' is assigned a value but never used.","'UKWB' is assigned a value but never used.","'UKWC' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected",["88"],["89"],"no-global-assign","no-unsafe-negation"]