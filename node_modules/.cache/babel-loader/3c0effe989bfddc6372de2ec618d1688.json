{"ast":null,"code":"var _jsxFileName = \"/home/james/sfu/hist338/enigma/enigma/src/components/Encode.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Encode() {\n  _s();\n\n  // store the users input in the inputMessage variable and update that value as the user add more text\n  const [inputMessage, setMessage] = useState(\"\");\n  useEffect(() => {\n    isValidInput(inputMessage);\n    console.log(\"Use effect inputmessge: \", inputMessage);\n  }, [inputMessage]); //eslint-disable-line react-hooks/exhaustive-deps\n  // user input validation checked in the useEffect call\n\n  function isValidInput(inputMessage) {\n    if (/^[a-zA-Z]*$/g.test(inputMessage)) {\n      console.log(\"its a valid input\");\n    } else {\n      console.log(\"error bad input\");\n      alert(\"Please use only the letters A-Z either upper or lower case.\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Code Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-text\",\n        id: \"enigma-input\",\n        type: \"text\",\n        placeholder: \"Input\",\n        onChange: event => setMessage(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Encode, \"xAJ0kx6qPkapBRqzMiCDI94H0Io=\");\n\n_c = Encode;\nexport default Encode;\n\nvar _c;\n\n$RefreshReg$(_c, \"Encode\");","map":{"version":3,"sources":["/home/james/sfu/hist338/enigma/enigma/src/components/Encode.js"],"names":["React","useState","useEffect","Encode","inputMessage","setMessage","isValidInput","console","log","test","alert","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAEd;AACA,QAAM,CAACC,YAAD,EAAeC,UAAf,IAA6BJ,QAAQ,CAAC,EAAD,CAA3C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,YAAY,CAACF,YAAD,CAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCJ,YAAxC;AACH,GAHQ,EAGN,CAACA,YAAD,CAHM,CAAT,CALc,CAQM;AAEpB;;AACA,WAASE,YAAT,CAAsBF,YAAtB,EAAoC;AAChC,QAAI,eAAeK,IAAf,CAAoBL,YAApB,CAAJ,EAAsC;AAClCG,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,KAFD,MAGI;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAE,MAAAA,KAAK,CAAC,6DAAD,CAAL;AACH;AACJ;;AAGD,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,SAAS,EAAC,YADd;AAEI,QAAA,EAAE,EAAC,cAFP;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,WAAW,EAAC,OAJhB;AAKI,QAAA,QAAQ,EAAGC,KAAD,IAAWN,UAAU,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd;AALnC;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAWI;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GAxCQV,M;;KAAAA,M;AA0CT,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nfunction Encode() {\n\n    // store the users input in the inputMessage variable and update that value as the user add more text\n    const [inputMessage, setMessage] = useState(\"\");\n    \n    useEffect(() => {\n        isValidInput(inputMessage);\n        console.log(\"Use effect inputmessge: \", inputMessage);\n    }, [inputMessage])  //eslint-disable-line react-hooks/exhaustive-deps\n\n    // user input validation checked in the useEffect call\n    function isValidInput(inputMessage) {\n        if (/^[a-zA-Z]*$/g.test(inputMessage)){\n            console.log(\"its a valid input\");\n        }\n        else{\n            console.log(\"error bad input\")\n            alert(\"Please use only the letters A-Z either upper or lower case.\")\n        }\n    }\n\n\n    return (\n        <div>\n            <div className=\"input-section\">\n                <label>Code Input</label>   \n                <input \n                    className=\"input-text\" \n                    id=\"enigma-input\" \n                    type=\"text\" \n                    placeholder=\"Input\"\n                    onChange={(event) => setMessage(event.target.value)}\n                />\n            </div>\n            <div>\n                \n            </div>\n\n        </div>\n    )\n}\n\nexport default Encode\n"]},"metadata":{},"sourceType":"module"}